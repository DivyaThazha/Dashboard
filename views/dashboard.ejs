<html lang="en-us">

<head>
    <title>SDN</title>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <!-- Mobile Metas -->
    <meta name="viewport" content="width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">

    <!-- Site Metas -->
    <meta name="keywords" content="">
    <meta name="description" content="">
    <meta name="author" content="">

    <!-- Site Icons -->
    <link rel="apple-touch-icon" href="images/apple-touch-icon.png">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="./../stylesheets/fontawesome.css">
    <link rel="stylesheet" href="./../stylesheets/style.css">
    <link rel="stylesheet" href="./../stylesheets/dashboard.css">
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.2.2/d3.min.js"></script>
</head>
<body>
<nav class="navbar navbar-inverse">
    <div class="container-fluid">
        <div class="navbar-header">
            <a class="navbar-brand" href="#">Dashboard</a>
        </div>
    </div>
</nav>

<section style="margin-top: 20px; min-height: 77%;">
    <div class="container">
        <h2></h2>
        <div class="row">
           <div class="col-md-7 ">
                <!--div id="graphs" ></div-->
                <div id="charts" >
                </div>
            </div>
            <div class="col-md-5 ">
                <div id="clusterContent">
                    <div class="table-header widgetHeader">
                    </div>
                    <div class="table-belowheader">
                        <ul class="nav nav-tabs">
                            <li class="active"><a data-toggle="tab" href="#home"><i class="material-icons" style="font-size:25px">assessment</i></a></li>
                            <li><a data-toggle="tab" href="#menu1"><i class="material-icons" style="font-size:25px">chrome_reader_mode</i></a></li>
                            <li><a data-toggle="tab" href="#menu2"><i class="material-icons" style="font-size:25px">description</i></a></li>
                        </ul>
                    </div>
                    <div class="table-content">
                        <div class="tab-content">
                            <div id="home" class="tab-pane fade in active">
                                <h3>HOME</h3>
                                <p>Some content.</p>
                            </div>
                            <div id="menu1" class="tab-pane fade">
                                <div class="tabulardata tabulardata-conditions" >
                                    <div class="tabulardata-content">
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">Network Available</span>
                                            <span class="tabulardata-content-col tabulardata_networkAvailable">-</span>
                                        </div>
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">Memory Pressure</span>
                                            <span class="tabulardata-content-col tabulardata_memoryPressure">-</span>
                                        </div>
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">Disk Pressure</span>
                                            <span class="tabulardata-content-col tabulardata_diskPressure">-</span>
                                        </div>
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">PID Pressure</span>
                                            <span class="tabulardata-content-col tabulardata_PIDPressure">-</span>
                                        </div>
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">Current Status</span>
                                            <span class="tabulardata-content-col tabulardata_Ready">-</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div id="menu2" class="tab-pane fade">
                                <h3>Menu 2</h3>
                                <p>Some content in menu 2.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>

        <div class="row">
            <div class="col-md-12 ">
                <div class="panel-group" id="accordion">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" data-parent="#accordion" href="#collapse1">
                                    Overview</a>
                            </h4>
                        </div>
                        <div id="collapse1" class="panel-collapse collapse in">
                            <div class="panel-body">
                                <div class="tabulardata">
                                    <div class="tabulardata-header">
                                    </div>
                                    <div class="tabulardata-content">
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">Name</span>
                                            <span class="tabulardata-content-col tabulardata_ID">-</span>
                                        </div>
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">IP Address</span>
                                            <span class="tabulardata-content-col tabulardata_IP">-</span>
                                        </div>
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">Creation Time</span>
                                            <span class="tabulardata-content-col tabulardata_creation_timestamp">-</span>
                                        </div>
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">Architecture</span>
                                            <span class="tabulardata-content-col tabulardata_Architecture">-</span>
                                        </div>

                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">Machine ID</span>
                                            <span class="tabulardata-content-col tabulardata_machineID">-</span>
                                        </div>
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">Memory Usage</span>
                                            <span class="tabulardata-content-col tabulardata_memoryUsage">-</span>
                                        </div>
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">Kernel Version</span>
                                            <span class="tabulardata-content-col tabulardata_kernel_version">-</span>
                                        </div>
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">Operating System</span>
                                            <span class="tabulardata-content-col tabulardata_operating_system">-</span>
                                        </div>
                                        <div class="tabulardata-row">
                                            <span class="tabulardata-content-col">OS Image</span>
                                            <span class="tabulardata-content-col tabulardata_os_image">-</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" data-parent="#accordion" href="#collapse2">
                                    Workload Statuses</a>
                            </h4>
                        </div>
                        <div id="collapse2" class="panel-collapse collapse">
                            <div class="panel-body">Lorem ipsum dolor sit amet, consectetur adipisicing elit,
                                sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
                                minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
                                commodo consequat.</div>
                        </div>
                    </div>
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" data-parent="#accordion" href="#collapse3">
                                    Nodes</a>
                            </h4>
                        </div>
                        <div id="collapse3" class="panel-collapse collapse">
                            <div class="panel-body">Lorem ipsum dolor sit amet, consectetur adipisicing elit,
                                sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
                                minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
                                commodo consequat.</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<a href="#" id="scroll-to-top" class="dmtop global-radius"><i class="fa fa-angle-up"></i></a>
<script>
   /* var myCluster = document.getElementById("clusterContent");
    myCluster.style.display = "none";

    var div = d3.select("body").append("div")
        .attr("class","tooltip")
        .style("opacity", 0);
    var w = 750;
    var h = 600;
    var linkDistance=400;
    var colors = d3.scale.category10();
    var svg = d3.select("#graphs").append("svg").attr({"width":w,"height":h});*/

    function sendRequest()
    {
        console.log("Sending request")
        $.ajax({
            url: 'http://localhost:5000/kube-api/graph',
            dataType: 'json',
            type: 'get',
            cache: true,
            crossDomain : true,
            success: function(resp){
                console.log(resp.graph);
                svg.selectAll("*").remove();
                data = resp.graph;

                var force = d3.layout.force()           // Layout Setter.
                    .nodes(data.nodes)
                    .links(data.edges)
                    .size([w,h])
                    .linkDistance([linkDistance])
                    .charge([-300])
                    .theta(0.1)
                    .gravity(0.05)
                    .start();

                var edges = svg.selectAll("line")       // Edge creator
                    .data(data.edges)
                    .enter()
                    .append("line")
                    .attr("id",function(d,i) {return 'edge'+i})
                    //.attr('marker-end','url(#arrowhead)')
                    .style("stroke","black")
                    .style("stroke-width","3")
                    .style("pointer-events", "none");

                var nodes = svg.selectAll("svg.image")   //Node creator.
                    .data(data.nodes)
                    .enter()
                    .append("image").attr('width', 70).attr('height', 70).attr('xlink:href',function(d){
                        var src = d.id == "kubernetes-sdn-master"? "images/cloud.png": d.id=="OpenVSwitch"? "images/router.png":'images/raspberry-pi.png'
                        return src
                    }).attr("class","clusterimage")
                    .on("mouseenter", function(d){
                        //code for status: Red/Green
                        var status;
                        if(d.status == "True")
                           status =  "clusterStatus";
                        else
                            status =  "clusterStatusInactive";
                        //code for Sentence case name
                        var name;
                        if(d.id == "OpenVSwitch" || d.id == "kubernetes-sdn-master")
                            name = d.id;
                        else
                            name = d.id.charAt(0).toUpperCase() + d.id.substring(1,d.id.length-2) +" "+d.id.charAt(d.id.length-1) + d.id.charAt(d.id.length);

                        div.transition()
                            .duration(200)
                            .style("opacity", 10);
                        div.html(
                            "<div class='"+status+"'>"+ "</div>" + "<div class='rightTooltipContent' >"+
                            "<div class='tooltipHeader'>" + name + "</div>" +
                            "<div>IP: "   + d.IP   + "</div>" +
                            "<div class=''>Status: "   + d.status   + "</div>"+
                            "</div>"
                        )
                        div.style("left",(d.x + 110) + "px")
                            .style("top",(d.y + 70) + "px");

                    })
                    .on("mouseleave",function(d){
                        div.style("opacity", 0);
                    })
                    .on("mousedown",function(d){
                        var clicked = d3.select(this);
                        clicked.attr("stroke-width", 5);
                    })
                    .on("click", function (d){
                        if(d.id != "OpenVSwitch"){
                            fill_advanced_details_overview(d);
                            fill_widget_conditions(d);

                            if (myCluster.style.display === "none") {
                                myCluster.style.display = "block";
                            } else {
                                myCluster.style.display = "none";
                            }
                        }
                    })
                    .attr({"r":50})
                    .call(force.drag)
                    .style("fill",function(d,i){return colors(i);});

                nodes.attr("y", "1em");

                var nodelabels = svg.selectAll(".nodelabel")  // Adding Labels to the Nodes.
                    .data(data.nodes)
                    .enter()
                    .append("text")

                    .attr({"x":function(d){return d.x;},
                        "y":function(d){return d.y;},
                        "class":"nodelabel",
                        "stroke":"blue"})
                //  .text(function(d){return d.name+d.IP;});

                var edgepaths = svg.selectAll(".edgepath")   // Adding edge edgepaths
                    .data(data.edges)
                    .enter()
                    .append('path')
                    .attr({'d': function(d) {return 'M '+d.source.x+' '+d.source.y+' L '+ d.target.x +' '+d.target.y},
                        'class':'edgepath',
                        'fill-opacity':0,
                        'stroke-opacity':0,
                        'fill':'blue',
                        'stroke':'red',
                        'id':function(d,i) {return 'edgepath'+i}})
                    .style("pointer-events", "none");

                svg.append('defs').append('marker')      //SVG Attributes.
                    .attr({'id':'arrowhead',
                        'viewBox':'-0 -5 10 10',
                        'refX':25,
                        'refY':0,
                        //'markerUnits':'strokeWidth',
                        'orient':'auto',
                        'markerWidth':10,
                        'markerHeight':10,
                        'xoverflow':'visible'})
                    .append('svg:path')
                    .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
                    .attr('fill', '#080808')
                    .attr('stroke','#080808');

                force.on("tick", function(){
                    edges.attr({"x1": function(d){return d.source.x;},
                        "y1": function(d){return d.source.y;},
                        "x2": function(d){return d.target.x;},
                        "y2": function(d){return d.target.y;}});

                    nodes.attr({"x":function(d){
                            return d.x-25;
                        },
                        "y":function(d){
                            return d.y-20;
                    }});

                    nodelabels.attr("x", function(d) { return d.x; })
                        .attr("y", function(d) { return d.y; });

                    edgepaths.attr('d', function(d) { var path='M '+d.source.x+' '+d.source.y+' L '+ d.target.x +' '+d.target.y;
                        return path});
                });
                //      }// if ends
                // });// function(index,value) ends here
            },
            error : function(request,error)
            {
                console.log("Request: "+JSON.stringify(request));
            }

        });
    }
    //sendRequest();

    function fill_advanced_details_overview(d){
        console.log(d);
        document.getElementsByClassName("tabulardata_ID")[0].innerText = d.id;
        document.getElementsByClassName("tabulardata_IP")[0].innerText = d.IP;
        document.getElementsByClassName("tabulardata_Architecture")[0].innerText = d.architecture;
        document.getElementsByClassName("tabulardata_creation_timestamp")[0].innerText = d.creation_timestamp;
        document.getElementsByClassName("tabulardata_kernel_version")[0].innerText = d.kernel_version;
        document.getElementsByClassName("tabulardata_machineID")[0].innerText = d.machineID;
        document.getElementsByClassName("tabulardata_memoryUsage")[0].innerText = d.memoryUsage;
        document.getElementsByClassName("tabulardata_operating_system")[0].innerText = d.operating_system;
        document.getElementsByClassName("tabulardata_os_image")[0].innerText = d.os_image;
    }

    function fill_widget_conditions(d) {
        document.getElementsByClassName("tabulardata_networkAvailable")[0].innerText = d.condition_NetworkUnavailable;
        document.getElementsByClassName("tabulardata_memoryPressure")[0].innerText = d.condition_MemoryPressure;
        document.getElementsByClassName("tabulardata_diskPressure")[0].innerText = d.condition_DiskPressure;
        document.getElementsByClassName("tabulardata_PIDPressure")[0].innerText = d.condition_PIDPressure;
        document.getElementsByClassName("tabulardata_Ready")[0].innerText = d.condition_Ready;

        var name;
        if( d.id == "kubernetes-sdn-master")
            name = d.id;
        else
            name = d.id.substring(0,d.id.length-2).toUpperCase() +" "+d.id.charAt(d.id.length-1) + d.id.charAt(d.id.length);

        document.getElementsByClassName("widgetHeader")[0].innerText = name;

    }
    //setInterval('sendRequest()', 50000);
















   var data = [
       { "name" : "Level 2: A", "parent":"Top Level" },
       { "name" : "Top Level", "parent":"null" },
       { "name" : "Son of A", "parent":"Level 2: A" },
       { "name" : "Daughter of A", "parent":"Level 2: A" },
       { "name" : "Level 2: B", "parent":"Top Level" }
   ];

   // *********** Convert flat data into a nice tree ***************
   // create a name: node map
   var dataMap = data.reduce(function(map, node) {
       map[node.name] = node;
       return map;
   }, {});

   // create the tree array
   var treeData = [];
   data.forEach(function(node) {
       // add to parent
       var parent = dataMap[node.parent];
       if (parent) {
           // create child array if it doesn't exist
           (parent.children || (parent.children = []))
           // add node to child array
               .push(node);
       } else {
           // parent is null or missing
           treeData.push(node);
       }
   });

   // ************** Generate the tree diagram	 *****************
   var margin = {top: 40, right: 120, bottom: 20, left: 120},
       width = 960 - margin.right - margin.left,
       height = 500 - margin.top - margin.bottom;

   var i = 0;

   var tree = d3.layout.tree()
       .size([height, width]);

   var diagonal = d3.svg.diagonal()
       .projection(function(d) { return [d.x, d.y]; });

   var svg = d3.select("#charts").append("svg")
       .attr("width", width + margin.right + margin.left)
       .attr("height", height + margin.top + margin.bottom)
       .append("g")
       .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

   root = treeData[0];

   update(root);

   function update(source) {

       // Compute the new tree layout.
       var nodes = tree.nodes(root).reverse(),
           links = tree.links(nodes);

       // Normalize for fixed-depth.
       nodes.forEach(function(d) { d.y = d.depth * 100; });

       // Declare the nodes…
       var node = svg.selectAll("g.node")
           .data(nodes, function(d) { return d.id || (d.id = ++i); });

       // Enter the nodes.
       var nodeEnter = node.enter().append("g")
           .attr("class", "node")
           .attr("transform", function(d) {
               return "translate(" + d.x + "," + d.y + ")"; });

       nodeEnter.append("circle")
           .attr("r", 10)
           .style("fill", "#fff");

       nodeEnter.append("text")
           .attr("y", function(d) {
               return d.children || d._children ? -18 : 18; })
           .attr("dy", ".35em")
           .attr("text-anchor", "middle")
           .text(function(d) { return d.name; })
           .style("fill-opacity", 1);

       // Declare the links…
       var link = svg.selectAll("path.link")
           .data(links, function(d) { return d.target.id; });

       // Enter the links.
       link.enter().insert("path", "g")
           .attr("class", "link")
           .attr("d", diagonal);

   }



</script>
</body>
</html>